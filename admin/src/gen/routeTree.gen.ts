/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './../routes/__root'

// Create Virtual Routes

const OrdersLazyImport = createFileRoute('/orders')()
const ListLazyImport = createFileRoute('/list')()
const AddLazyImport = createFileRoute('/add')()
const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const OrdersLazyRoute = OrdersLazyImport.update({
  path: '/orders',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./../routes/orders.lazy').then((d) => d.Route))

const ListLazyRoute = ListLazyImport.update({
  path: '/list',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./../routes/list.lazy').then((d) => d.Route))

const AddLazyRoute = AddLazyImport.update({
  path: '/add',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./../routes/add.lazy').then((d) => d.Route))

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./../routes/index.lazy').then((d) => d.Route))

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/add': {
      id: '/add'
      path: '/add'
      fullPath: '/add'
      preLoaderRoute: typeof AddLazyImport
      parentRoute: typeof rootRoute
    }
    '/list': {
      id: '/list'
      path: '/list'
      fullPath: '/list'
      preLoaderRoute: typeof ListLazyImport
      parentRoute: typeof rootRoute
    }
    '/orders': {
      id: '/orders'
      path: '/orders'
      fullPath: '/orders'
      preLoaderRoute: typeof OrdersLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/add': typeof AddLazyRoute
  '/list': typeof ListLazyRoute
  '/orders': typeof OrdersLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/add': typeof AddLazyRoute
  '/list': typeof ListLazyRoute
  '/orders': typeof OrdersLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/add': typeof AddLazyRoute
  '/list': typeof ListLazyRoute
  '/orders': typeof OrdersLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/add' | '/list' | '/orders'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/add' | '/list' | '/orders'
  id: '__root__' | '/' | '/add' | '/list' | '/orders'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  AddLazyRoute: typeof AddLazyRoute
  ListLazyRoute: typeof ListLazyRoute
  OrdersLazyRoute: typeof OrdersLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  AddLazyRoute: AddLazyRoute,
  ListLazyRoute: ListLazyRoute,
  OrdersLazyRoute: OrdersLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/add",
        "/list",
        "/orders"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/add": {
      "filePath": "add.lazy.tsx"
    },
    "/list": {
      "filePath": "list.lazy.tsx"
    },
    "/orders": {
      "filePath": "orders.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
